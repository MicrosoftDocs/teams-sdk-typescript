### YamlMime:TSType
name: App
uid: '@microsoft/teams.apps.App'
package: '@microsoft/teams.apps'
summary: The orchestrator for receiving/sending activities
fullName: App<TPlugin>
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: App<TPlugin>(AppOptions<TPlugin>)
    uid: '@microsoft/teams.apps.App.constructor'
    package: '@microsoft/teams.apps'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new App(options?: AppOptions<TPlugin>)'
      parameters:
        - id: options
          type: <xref uid="@microsoft/teams.apps.AppOptions" />&lt;TPlugin&gt;
          description: ''
properties:
  - name: api
    uid: '@microsoft/teams.apps.App.api'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: api
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'api: Client'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.api.Client" />
  - name: client
    uid: '@microsoft/teams.apps.App.client'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'client: Client'
      return:
        description: ''
        type: Client
  - name: configTab
    uid: '@microsoft/teams.apps.App.configTab'
    package: '@microsoft/teams.apps'
    summary: add a configurable tab
    fullName: configTab
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        configTab: (this: App<TPlugin>, url: string, options?:
        Partial<Omit<ConfigurableTab, "configurationUrl">>) => App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, url: string, options?:
          Partial&lt;Omit&lt;ConfigurableTab, "configurationUrl"&gt;&gt;) =&gt;
          App&lt;TPlugin&gt;
  - name: credentials
    uid: '@microsoft/teams.apps.App.credentials'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: credentials
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'credentials?: Credentials'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.api.Credentials" />
  - name: entraTokenValidator
    uid: '@microsoft/teams.apps.App.entraTokenValidator'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: entraTokenValidator
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'entraTokenValidator?: JwtValidator'
      return:
        description: ''
        type: JwtValidator
  - name: event
    uid: '@microsoft/teams.apps.App.event'
    package: '@microsoft/teams.apps'
    summary: subscribe to an event
    fullName: event
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        event: (this: App<TPlugin>, name: Name, cb:
        EventHandler<AppEvents<TPlugin>[Name]>) => App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, name: Name, cb:
          EventHandler&lt;AppEvents&lt;TPlugin&gt;[Name]&gt;) =&gt;
          App&lt;TPlugin&gt;
  - name: function
    uid: '@microsoft/teams.apps.App.function'
    package: '@microsoft/teams.apps'
    summary: add/update a function that can be called remotely
    fullName: function
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function: (this: App<TPlugin>, name: string, cb: (context:
        IFunctionContext<TData>) => any) => App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, name: string, cb: (context:
          IFunctionContext&lt;TData&gt;) =&gt; any) =&gt; App&lt;TPlugin&gt;
  - name: getPlugin
    uid: '@microsoft/teams.apps.App.getPlugin'
    package: '@microsoft/teams.apps'
    summary: get a plugin
    fullName: getPlugin
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'getPlugin: (this: App<TPlugin>, name: PluginName) => IPlugin | undefined'
      return:
        description: ''
        type: '(this: App&lt;TPlugin&gt;, name: PluginName) =&gt; IPlugin | undefined'
  - name: graph
    uid: '@microsoft/teams.apps.App.graph'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: graph
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'graph: Client'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.graph.Client" />
  - name: http
    uid: '@microsoft/teams.apps.App.http'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: http
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'http: HttpPlugin'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.apps.HttpPlugin" />
  - name: id
    uid: '@microsoft/teams.apps.App.id'
    package: '@microsoft/teams.apps'
    summary: the apps id
    fullName: id
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | string id
      return:
        description: ''
        type: undefined | string
  - name: log
    uid: '@microsoft/teams.apps.App.log'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: log
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'log: ILogger'
      return:
        description: ''
        type: ILogger
  - name: manifest
    uid: '@microsoft/teams.apps.App.manifest'
    package: '@microsoft/teams.apps'
    summary: the apps manifest
    fullName: manifest
    remarks: ''
    isDeprecated: false
    syntax:
      content: Partial<Manifest> manifest
      return:
        description: ''
        type: Partial&lt;<xref uid="@microsoft/teams.apps.manifest.Manifest" />&gt;
  - name: message
    uid: '@microsoft/teams.apps.App.message'
    package: '@microsoft/teams.apps'
    summary: subscribe to a message event for a specific pattern
    fullName: message
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        message: (this: App<TPlugin>, pattern: string | RegExp, cb:
        RouteHandler<IActivityContext<IMessageActivity,
        PluginAdditionalContext<TPlugin>>, void>) => App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, pattern: string | RegExp, cb:
          RouteHandler&lt;IActivityContext&lt;IMessageActivity,
          PluginAdditionalContext&lt;TPlugin&gt;&gt;, void&gt;) =&gt;
          App&lt;TPlugin&gt;
  - name: name
    uid: '@microsoft/teams.apps.App.name'
    package: '@microsoft/teams.apps'
    summary: the apps name
    fullName: name
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | string name
      return:
        description: ''
        type: undefined | string
  - name: oauth
    uid: '@microsoft/teams.apps.App.oauth'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: oauth
    remarks: ''
    isDeprecated: false
    syntax:
      content: '{ defaultConnectionName: string } oauth'
      return:
        description: ''
        type: '{ defaultConnectionName: string }'
  - name: 'on'
    uid: '@microsoft/teams.apps.App.on'
    package: '@microsoft/teams.apps'
    summary: subscribe to an event
    fullName: 'on'
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        on: (this: App<TPlugin>, name: Name, cb:
        Exclude<IRoutes<PluginAdditionalContext<TPlugin>>[Name], undefined>) =>
        App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, name: Name, cb:
          Exclude&lt;IRoutes&lt;PluginAdditionalContext&lt;TPlugin&gt;&gt;[Name],
          undefined&gt;) =&gt; App&lt;TPlugin&gt;
  - name: options
    uid: '@microsoft/teams.apps.App.options'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: options
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'options: AppOptions<TPlugin>'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.apps.AppOptions" />&lt;TPlugin&gt;
  - name: plugin
    uid: '@microsoft/teams.apps.App.plugin'
    package: '@microsoft/teams.apps'
    summary: add a plugin
    fullName: plugin
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'plugin: (this: App<TPlugin>, plugin: TPlugin) => App<TPlugin>'
      return:
        description: ''
        type: '(this: App&lt;TPlugin&gt;, plugin: TPlugin) =&gt; App&lt;TPlugin&gt;'
  - name: process
    uid: '@microsoft/teams.apps.App.process'
    package: '@microsoft/teams.apps'
    summary: activity handler called when an inbound activity is received
    fullName: process
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        process: (this: App<TPlugin>, sender: ISender<{}>, event:
        IActivityEvent) => Promise<{ status: number } | undefined>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, sender: ISender&lt;{}&gt;, event:
          IActivityEvent) =&gt; Promise&lt;{ status: number } | undefined&gt;
  - name: storage
    uid: '@microsoft/teams.apps.App.storage'
    package: '@microsoft/teams.apps'
    summary: ''
    fullName: storage
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'storage: IStorage'
      return:
        description: ''
        type: IStorage
  - name: tab
    uid: '@microsoft/teams.apps.App.tab'
    package: '@microsoft/teams.apps'
    summary: >-
      add/update a static tab.

      the tab will be hosted at

      `http://localhost:{{PORT}}/tabs/{{name}}` or
      `https://{{BOT_DOMAIN}}/tabs/{{name}}`
    fullName: tab
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        tab: (this: App<TPlugin>, name: string, path: string, options?:
        Partial<Omit<StaticTab, "contentUrl" | "entityId">>) => App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, name: string, path: string, options?:
          Partial&lt;Omit&lt;StaticTab, "contentUrl" | "entityId"&gt;&gt;) =&gt;
          App&lt;TPlugin&gt;
  - name: tokens
    uid: '@microsoft/teams.apps.App.tokens'
    package: '@microsoft/teams.apps'
    summary: the apps auth tokens
    fullName: tokens
    remarks: ''
    isDeprecated: false
    syntax:
      content: AppTokens tokens
      return:
        description: ''
        type: <xref uid="@microsoft/teams.apps.AppTokens" />
  - name: use
    uid: '@microsoft/teams.apps.App.use'
    package: '@microsoft/teams.apps'
    summary: register a middleware
    fullName: use
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        use: (this: App<TPlugin>, cb: RouteHandler<IActivityContext<Activity,
        PluginAdditionalContext<TPlugin>>, void | InvokeResponse<any>>) =>
        App<TPlugin>
      return:
        description: ''
        type: >-
          (this: App&lt;TPlugin&gt;, cb:
          RouteHandler&lt;IActivityContext&lt;Activity,
          PluginAdditionalContext&lt;TPlugin&gt;&gt;, void |
          InvokeResponse&lt;any&gt;&gt;) =&gt; App&lt;TPlugin&gt;
methods:
  - name: send(string, ActivityLike)
    uid: '@microsoft/teams.apps.App.send'
    package: '@microsoft/teams.apps'
    summary: send an activity proactively
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function send(conversationId: string, activity: ActivityLike): Promise<{
        attachmentLayout?: AttachmentLayout, attachments?: Attachment[],
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, deliveryMode?: DeliveryMode,
        entities?: Entity[], expiration?: Date, from?: Account<any>,
        getAccountMention?: (accountId: string) => undefined | MentionEntity,
        id: string, importance?: Importance, inputHint?: InputHint,
        isRecipientMentioned?: () => boolean, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, speak?:
        string, stripMentionsText?: (options?: StripMentionsTextOptions) =>
        IMessageActivity, suggestedActions?: SuggestedActions, summary?: string,
        team?: TeamInfo, text?: string, textFormat?: TextFormat, timestamp?:
        Date, type: "message", value?: any } | { channel?: ChannelInfo,
        channelData?: ChannelData & { eventType: "undeleteMessage" |
        "editMessage" }, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], expiration?: Date, from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, speak?:
        string, summary?: string, team?: TeamInfo, text?: string, timestamp?:
        Date, type: "messageUpdate", value?: any } | { channel?: ChannelInfo,
        channelData?: ChannelData & { eventType: "softDeleteMessage" },
        channelId?: ChannelID, conversation?: ConversationAccount, entities?:
        Entity[], from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "messageDelete" } | { channel?:
        ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, notification?:
        NotificationInfo, reactionsAdded?: MessageReaction[], reactionsRemoved?:
        MessageReaction[], recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "messageReaction" } | { channel?:
        ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.readReceipt", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event" } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingStart", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event", value?: { id: string,
        joinUrl: string, meetingType: string, startTime: Date, title: string } }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingEnd", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "event", value?: { endTime: Date, id: string, joinUrl: string,
        meetingType: string, title: string } } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingParticipantJoin", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event", value?: { members: { meeting:
        { inMeeting: boolean, role: string }, user: Account<any> }[] } } | {
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingParticipantLeave", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event", value?: { members: { meeting:
        { inMeeting: boolean, role: string }, user: Account<any> }[] } } | {
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "fileConsent/invoke", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: FileConsentCardResponse } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "actionableMessage/executeAction",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        O365ConnectorCardActionQuery } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "composeExtension/anonymousQueryLink",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: AppBasedLinkQuery }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "composeExtension/fetchTask", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: MessagingExtensionAction } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?:
        "composeExtension/onCardButtonClicked", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "composeExtension/queryLink", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: AppBasedLinkQuery }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "composeExtension/querySettingUrl", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: MessagingExtensionQuery } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "composeExtension/query",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        MessagingExtensionQuery } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "composeExtension/selectItem", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: any } | { channel?:
        ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "composeExtension/setting", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: MessagingExtensionQuery } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "composeExtension/submitAction",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        MessagingExtensionAction } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "config/fetch", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "config/submit", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "tab/fetch", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: TabRequest } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "tab/submit", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: TabRequest } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "task/fetch", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: TaskModuleRequest } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "task/submit", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: TaskModuleRequest }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "message/submitAction", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: { actionName: "feedback", actionValue: { feedback: string,
        reaction: "like" | "dislike" } } } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "handoff/action", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: { continuation:
        string } } | { channel?: ChannelInfo, channelData?: ChannelData,
        channelId?: ChannelID, conversation?: ConversationAccount, entities?:
        Entity[], from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "signin/tokenExchange", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: SignInExchangeToken } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "signin/verifyState", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        SigninStateVerifyQuery } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "adaptiveCard/action", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        AdaptiveCardInvokeValue } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, label?: string, localTimestamp?: Date, locale?: string,
        meeting?: MeetingInfo, name?: string, notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "trace", value?: any, valueType?: string } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, text?: string, timestamp?:
        Date, type: "typing" } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, notification?: NotificationInfo, recipient?: Account<any>,
        relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
        string, team?: TeamInfo, timestamp?: Date, type: "handoff" } | {
        channel?: ChannelInfo, channelData?: ChannelData & { eventType:
        "channelCreated" | "channelDeleted" | "channelRenamed" |
        "channelRestored" | "channelShared" | "channelUnshared" |
        "channelMemberAdded" | "channelMemberRemoved" | "teamArchived" |
        "teamDeleted" | "teamHardDeleted" | "teamRenamed" | "teamRestored" |
        "teamUnarchived" }, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>,
        historyDisclosed?: boolean, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        membersAdded?: Account<any>[], membersRemoved?: Account<any>[],
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, topicName?: string, type:
        "conversationUpdate" } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, code?: EndOfConversationCode,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, text?: string, timestamp?: Date, type: "endOfConversation" } |
        { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        string, notification?: NotificationInfo, recipient?: Account<any>,
        relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
        string, team?: TeamInfo, timestamp?: Date, type: "command", value?:
        CommandValue<any> } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: string, notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "commandResult", value?: CommandResultValue<any> } | { action?: "add",
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "installationUpdate" } | { action?:
        "remove", channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "installationUpdate" }>
      parameters:
        - id: conversationId
          type: string
          description: the conversation to send to
        - id: activity
          type: <xref uid="@microsoft/teams.api.ActivityLike" />
          description: the activity to send
      return:
        description: ''
        type: >-
          Promise&lt;{ attachmentLayout?: AttachmentLayout, attachments?:
          Attachment[], channel?: ChannelInfo, channelData?: ChannelData,
          channelId?: ChannelID, conversation?: ConversationAccount,
          deliveryMode?: DeliveryMode, entities?: Entity[], expiration?: Date,
          from?: Account&lt;any&gt;, getAccountMention?: (accountId: string)
          =&gt; undefined | MentionEntity, id: string, importance?: Importance,
          inputHint?: InputHint, isRecipientMentioned?: () =&gt; boolean,
          isStreaming?: () =&gt; boolean, localTimestamp?: Date, locale?:
          string, meeting?: MeetingInfo, notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, speak?: string,
          stripMentionsText?: (options?: StripMentionsTextOptions) =&gt;
          IMessageActivity, suggestedActions?: SuggestedActions, summary?:
          string, team?: TeamInfo, text?: string, textFormat?: TextFormat,
          timestamp?: Date, type: "message", value?: any } | { channel?:
          ChannelInfo, channelData?: ChannelData & { eventType:
          "undeleteMessage" | "editMessage" }, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], expiration?:
          Date, from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt;
          boolean, localTimestamp?: Date, locale?: string, meeting?:
          MeetingInfo, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, speak?: string, summary?: string, team?:
          TeamInfo, text?: string, timestamp?: Date, type: "messageUpdate",
          value?: any } | { channel?: ChannelInfo, channelData?: ChannelData & {
          eventType: "softDeleteMessage" }, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "messageDelete" } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, reactionsAdded?: MessageReaction[],
          reactionsRemoved?: MessageReaction[], recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "messageReaction" } |
          { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "<xref uid="application/vnd.microsoft.readReceipt" />", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "event" } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "<xref
          uid="application/vnd.microsoft.meetingStart" />", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "event", value?: { id: string,
          joinUrl: string, meetingType: string, startTime: Date, title: string }
          } | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "<xref uid="application/vnd.microsoft.meetingEnd" />", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "event", value?: { endTime: Date,
          id: string, joinUrl: string, meetingType: string, title: string } } |
          { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "<xref uid="application/vnd.microsoft.meetingParticipantJoin" />",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "event", value?: {
          members: { meeting: { inMeeting: boolean, role: string }, user:
          Account&lt;any&gt; }[] } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "<xref
          uid="application/vnd.microsoft.meetingParticipantLeave" />",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "event", value?: {
          members: { meeting: { inMeeting: boolean, role: string }, user:
          Account&lt;any&gt; }[] } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "fileConsent/invoke",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          FileConsentCardResponse } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?:
          "actionableMessage/executeAction", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: O365ConnectorCardActionQuery } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/anonymousQueryLink", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "invoke", value?: AppBasedLinkQuery
          } | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/fetchTask", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionAction } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/onCardButtonClicked", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "invoke", value?: any } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/queryLink", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: AppBasedLinkQuery } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/querySettingUrl", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionQuery } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/query", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: MessagingExtensionQuery } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/selectItem", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: any } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/setting", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionQuery } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/submitAction", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionAction } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "config/fetch", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "config/submit",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?: any
          } | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "tab/fetch", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: TabRequest } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "tab/submit",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          TabRequest } | { channel?: ChannelInfo, channelData?: ChannelData,
          channelId?: ChannelID, conversation?: ConversationAccount, entities?:
          Entity[], from?: Account&lt;any&gt;, id: string, isStreaming?: ()
          =&gt; boolean, localTimestamp?: Date, locale?: string, meeting?:
          MeetingInfo, name?: "task/fetch", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: TaskModuleRequest } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "task/submit", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: TaskModuleRequest } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "message/submitAction",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?: {
          actionName: "feedback", actionValue: { feedback: string, reaction:
          "like" | "dislike" } } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "handoff/action",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?: {
          continuation: string } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "signin/tokenExchange",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          SignInExchangeToken } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "signin/verifyState",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          SigninStateVerifyQuery } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "adaptiveCard/action",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          AdaptiveCardInvokeValue } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, label?: string,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          string, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "trace", value?: any, valueType?: string } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, text?: string, timestamp?: Date, type: "typing" } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "handoff" } | {
          channel?: ChannelInfo, channelData?: ChannelData & { eventType:
          "channelCreated" | "channelDeleted" | "channelRenamed" |
          "channelRestored" | "channelShared" | "channelUnshared" |
          "channelMemberAdded" | "channelMemberRemoved" | "teamArchived" |
          "teamDeleted" | "teamHardDeleted" | "teamRenamed" | "teamRestored" |
          "teamUnarchived" }, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          historyDisclosed?: boolean, id: string, isStreaming?: () =&gt;
          boolean, localTimestamp?: Date, locale?: string, meeting?:
          MeetingInfo, membersAdded?: Account&lt;any&gt;[], membersRemoved?:
          Account&lt;any&gt;[], notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date,
          topicName?: string, type: "conversationUpdate" } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID, code?:
          EndOfConversationCode, conversation?: ConversationAccount, entities?:
          Entity[], from?: Account&lt;any&gt;, id: string, isStreaming?: ()
          =&gt; boolean, localTimestamp?: Date, locale?: string, meeting?:
          MeetingInfo, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, text?: string,
          timestamp?: Date, type: "endOfConversation" } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          string, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "command", value?: CommandValue&lt;any&gt; } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          string, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "commandResult", value?: CommandResultValue&lt;any&gt; } | { action?:
          "add", channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "installationUpdate"
          } | { action?: "remove", channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "installationUpdate" }&gt;
  - name: start(string | number)
    uid: '@microsoft/teams.apps.App.start'
    package: '@microsoft/teams.apps'
    summary: start the app
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function start(port?: string | number): Promise<void>'
      parameters:
        - id: port
          type: string | number
          description: port to listen on
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stop()
    uid: '@microsoft/teams.apps.App.stop'
    package: '@microsoft/teams.apps'
    summary: stop the app
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stop(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
