### YamlMime:TSType
name: ConversationClient
uid: '@microsoft/teams.api.ConversationClient'
package: '@microsoft/teams.api'
summary: ''
fullName: ConversationClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ConversationClient(string, any)
    uid: '@microsoft/teams.api.ConversationClient.constructor'
    package: '@microsoft/teams.api'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ConversationClient(serviceUrl: string, options?: any)'
      parameters:
        - id: serviceUrl
          type: string
          description: ''
        - id: options
          type: any
          description: ''
properties:
  - name: http
    uid: '@microsoft/teams.api.ConversationClient.http'
    package: '@microsoft/teams.api'
    summary: ''
    fullName: http
    remarks: ''
    isDeprecated: false
    syntax:
      content: Client http
      return:
        description: ''
        type: Client
  - name: serviceUrl
    uid: '@microsoft/teams.api.ConversationClient.serviceUrl'
    package: '@microsoft/teams.api'
    summary: ''
    fullName: serviceUrl
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'serviceUrl: string'
      return:
        description: ''
        type: string
methods:
  - name: activities(string)
    uid: '@microsoft/teams.api.ConversationClient.activities'
    package: '@microsoft/teams.api'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function activities(conversationId: string): { create: (params:
        ActivityParams) => Promise<Resource>, delete: (id: string) =>
        Promise<void>, members: (activityId: string) => Promise<Account<any>[]>,
        reply: (id: string, params: ActivityParams) => Promise<Resource>,
        update: (id: string, params: ActivityParams) => Promise<Resource> }
      parameters:
        - id: conversationId
          type: string
          description: ''
      return:
        description: ''
        type: >-
          { create: (params: ActivityParams) =&gt; Promise&lt;Resource&gt;,
          delete: (id: string) =&gt; Promise&lt;void&gt;, members: (activityId:
          string) =&gt; Promise&lt;Account&lt;any&gt;[]&gt;, reply: (id: string,
          params: ActivityParams) =&gt; Promise&lt;Resource&gt;, update: (id:
          string, params: ActivityParams) =&gt; Promise&lt;Resource&gt; }
  - name: create(CreateConversationParams)
    uid: '@microsoft/teams.api.ConversationClient.create'
    package: '@microsoft/teams.api'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(params: CreateConversationParams):
        Promise<ConversationResource>
      parameters:
        - id: params
          type: <xref uid="@microsoft/teams.api.CreateConversationParams" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@microsoft/teams.api.ConversationResource"
          />&gt;
  - name: get(GetConversationsParams)
    uid: '@microsoft/teams.api.ConversationClient.get'
    package: '@microsoft/teams.api'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(params: GetConversationsParams):
        Promise<GetConversationsResponse>
      parameters:
        - id: params
          type: <xref uid="@microsoft/teams.api.GetConversationsParams" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@microsoft/teams.api.GetConversationsResponse"
          />&gt;
  - name: members(string)
    uid: '@microsoft/teams.api.ConversationClient.members'
    package: '@microsoft/teams.api'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function members(conversationId: string): { delete: (id: string) =>
        Promise<void>, get: () => Promise<Account<any>[]>, getById: (id: string)
        => Promise<Account<any>> }
      parameters:
        - id: conversationId
          type: string
          description: ''
      return:
        description: ''
        type: >-
          { delete: (id: string) =&gt; Promise&lt;void&gt;, get: () =&gt;
          Promise&lt;Account&lt;any&gt;[]&gt;, getById: (id: string) =&gt;
          Promise&lt;Account&lt;any&gt;&gt; }
