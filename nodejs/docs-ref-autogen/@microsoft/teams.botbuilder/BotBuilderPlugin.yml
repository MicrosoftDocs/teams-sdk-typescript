### YamlMime:TSType
name: BotBuilderPlugin
uid: '@microsoft/teams.botbuilder.BotBuilderPlugin'
package: '@microsoft/teams.botbuilder'
summary: ''
fullName: BotBuilderPlugin
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: BotBuilderPlugin(BotBuilderPluginOptions)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.constructor'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new BotBuilderPlugin(options?: BotBuilderPluginOptions)'
      parameters:
        - id: options
          type: <xref uid="@microsoft/teams.botbuilder.BotBuilderPluginOptions" />
          description: ''
properties:
  - name: $onActivity
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.$onActivity'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: $onActivity
    remarks: ''
    isDeprecated: false
    syntax:
      content: '$onActivity: (event: IActivityEvent) => void'
      return:
        description: ''
        type: '(event: IActivityEvent) =&gt; void'
  - name: $onError
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.$onError'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: $onError
    remarks: ''
    isDeprecated: false
    syntax:
      content: '$onError: (event: IErrorEvent) => void'
      return:
        description: ''
        type: '(event: IErrorEvent) =&gt; void'
  - name: botToken
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.botToken'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: botToken
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'botToken?: () => IToken'
      return:
        description: ''
        type: () =&gt; IToken
  - name: client
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.client'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: client
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'client: Client'
      return:
        description: ''
        type: Client
  - name: graphToken
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.graphToken'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: graphToken
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'graphToken?: () => IToken'
      return:
        description: ''
        type: () =&gt; IToken
  - name: logger
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.logger'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: logger
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'logger: ILogger'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.common.ILogger" />
  - name: manifest
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.manifest'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: manifest
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'manifest: Partial<Manifest>'
      return:
        description: ''
        type: Partial&lt;<xref uid="@microsoft/teams.apps.Manifest" />&gt;
  - name: port
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.port'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: port
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | number port
      return:
        description: ''
        type: undefined | number
  - name: server
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.server'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: server
    remarks: ''
    isDeprecated: false
    syntax:
      content: Server<typeof IncomingMessage, typeof ServerResponse> server
      return:
        description: ''
        type: Server&lt;typeof IncomingMessage, typeof ServerResponse&gt;
inheritedProperties:
  - name: credentials
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.credentials'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: credentials
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'credentials?: Credentials'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.api.Credentials" />
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.credentials
  - name: delete
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.delete'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: delete
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'delete: IRouterMatcher<Application, "delete">'
      return:
        description: ''
        type: IRouterMatcher&lt;Application, "delete"&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.delete
  - name: get
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.get'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: get
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'get: (name: string) => any & IRouterMatcher<Application, any>'
      return:
        description: ''
        type: '(name: string) =&gt; any & IRouterMatcher&lt;Application, any&gt;'
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.get
  - name: patch
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.patch'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: patch
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'patch: IRouterMatcher<Application, "patch">'
      return:
        description: ''
        type: IRouterMatcher&lt;Application, "patch"&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.patch
  - name: post
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.post'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: post
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'post: IRouterMatcher<Application, "post">'
      return:
        description: ''
        type: IRouterMatcher&lt;Application, "post"&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.post
  - name: put
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.put'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: put
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'put: IRouterMatcher<Application, "put">'
      return:
        description: ''
        type: IRouterMatcher&lt;Application, "put"&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.put
  - name: route
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.route'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: route
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'route: (prefix: T) => IRoute<T>'
      return:
        description: ''
        type: '(prefix: T) =&gt; IRoute&lt;T&gt;'
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.route
  - name: use
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.use'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    fullName: use
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'use: ApplicationRequestHandler<Application>'
      return:
        description: ''
        type: ApplicationRequestHandler&lt;Application&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.use
inheritedMethods:
  - name: createStream(ConversationReference)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.createStream'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function createStream(ref: ConversationReference): IStreamer'
      parameters:
        - id: ref
          type: <xref uid="@microsoft/teams.api.ConversationReference" />
          description: ''
      return:
        description: ''
        type: <xref uid="@microsoft/teams.apps.IStreamer" />
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.createStream
  - name: onActivityResponse(IPluginActivityResponseEvent)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.onActivityResponse'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function onActivityResponse(__namedParameters:
        IPluginActivityResponseEvent)
      parameters:
        - id: __namedParameters
          type: <xref uid="@microsoft/teams.apps.IPluginActivityResponseEvent" />
          description: ''
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.onActivityResponse
  - name: onError(IPluginErrorEvent)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.onError'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function onError(__namedParameters: IPluginErrorEvent)'
      parameters:
        - id: __namedParameters
          type: <xref uid="@microsoft/teams.apps.IPluginErrorEvent" />
          description: ''
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.onError
  - name: onStart(IPluginStartEvent)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.onStart'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function onStart(__namedParameters: IPluginStartEvent): Promise<void>'
      parameters:
        - id: __namedParameters
          type: <xref uid="@microsoft/teams.apps.IPluginStartEvent" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.onStart
  - name: onStop()
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.onStop'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function onStop()
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.onStop
  - name: send(ActivityParams, ConversationReference)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.send'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function send(activity: ActivityParams, ref: ConversationReference):
        Promise<{ attachmentLayout?: AttachmentLayout, attachments?:
        Attachment[], channel?: ChannelInfo, channelData?: ChannelData,
        channelId?: ChannelID, conversation?: ConversationAccount,
        deliveryMode?: DeliveryMode, entities?: Entity[], expiration?: Date,
        from?: Account<any>, getAccountMention?: (accountId: string) =>
        undefined | MentionEntity, id: string, importance?: Importance,
        inputHint?: InputHint, isRecipientMentioned?: () => boolean,
        isStreaming?: () => boolean, localTimestamp?: Date, locale?: string,
        meeting?: MeetingInfo, notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, speak?: string, stripMentionsText?: (options?:
        StripMentionsTextOptions) => IMessageActivity, suggestedActions?:
        SuggestedActions, summary?: string, team?: TeamInfo, text?: string,
        textFormat?: TextFormat, timestamp?: Date, type: "message", value?: any
        } | { channel?: ChannelInfo, channelData?: ChannelData & { eventType:
        "undeleteMessage" | "editMessage" }, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], expiration?:
        Date, from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, speak?:
        string, summary?: string, team?: TeamInfo, text?: string, timestamp?:
        Date, type: "messageUpdate", value?: any } | { channel?: ChannelInfo,
        channelData?: ChannelData & { eventType: "softDeleteMessage" },
        channelId?: ChannelID, conversation?: ConversationAccount, entities?:
        Entity[], from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "messageDelete" } | { channel?:
        ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, notification?:
        NotificationInfo, reactionsAdded?: MessageReaction[], reactionsRemoved?:
        MessageReaction[], recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "messageReaction" } | { channel?:
        ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.readReceipt", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event" } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingStart", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event", value?: { id: string,
        joinUrl: string, meetingType: string, startTime: Date, title: string } }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingEnd", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "event", value?: { endTime: Date, id: string, joinUrl: string,
        meetingType: string, title: string } } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingParticipantJoin", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event", value?: { members: { meeting:
        { inMeeting: boolean, role: string }, user: Account<any> }[] } } | {
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "application/vnd.microsoft.meetingParticipantLeave", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "event", value?: { members: { meeting:
        { inMeeting: boolean, role: string }, user: Account<any> }[] } } | {
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "fileConsent/invoke", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: FileConsentCardResponse } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "actionableMessage/executeAction",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        O365ConnectorCardActionQuery } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "composeExtension/anonymousQueryLink",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: AppBasedLinkQuery }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "composeExtension/fetchTask", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: MessagingExtensionAction } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?:
        "composeExtension/onCardButtonClicked", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "composeExtension/queryLink", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: AppBasedLinkQuery }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "composeExtension/querySettingUrl", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: MessagingExtensionQuery } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "composeExtension/query",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        MessagingExtensionQuery } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "composeExtension/selectItem", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: any } | { channel?:
        ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, name?:
        "composeExtension/setting", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: MessagingExtensionQuery } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "composeExtension/submitAction",
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        MessagingExtensionAction } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "config/fetch", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "config/submit", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "tab/fetch", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: TabRequest } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "tab/submit", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: TabRequest } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "task/fetch", notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "invoke", value?: TaskModuleRequest } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "task/submit", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: TaskModuleRequest }
        | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "message/submitAction", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: { actionName: "feedback", actionValue: { feedback: string,
        reaction: "like" | "dislike" } } } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, name?: "handoff/action", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?: { continuation:
        string } } | { channel?: ChannelInfo, channelData?: ChannelData,
        channelId?: ChannelID, conversation?: ConversationAccount, entities?:
        Entity[], from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        "signin/tokenExchange", notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type: "invoke",
        value?: SignInExchangeToken } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "signin/verifyState", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        SigninStateVerifyQuery } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: "adaptiveCard/action", notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "invoke", value?:
        AdaptiveCardInvokeValue } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, label?: string, localTimestamp?: Date, locale?: string,
        meeting?: MeetingInfo, name?: string, notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "trace", value?: any, valueType?: string } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, conversation?:
        ConversationAccount, entities?: Entity[], from?: Account<any>, id:
        string, isStreaming?: () => boolean, localTimestamp?: Date, locale?:
        string, meeting?: MeetingInfo, notification?: NotificationInfo,
        recipient?: Account<any>, relatesTo?: ConversationReference, replyToId?:
        string, serviceUrl?: string, team?: TeamInfo, text?: string, timestamp?:
        Date, type: "typing" } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, notification?: NotificationInfo, recipient?: Account<any>,
        relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
        string, team?: TeamInfo, timestamp?: Date, type: "handoff" } | {
        channel?: ChannelInfo, channelData?: ChannelData & { eventType:
        "channelCreated" | "channelDeleted" | "channelRenamed" |
        "channelRestored" | "teamArchived" | "teamDeleted" | "teamHardDeleted" |
        "teamRenamed" | "teamRestored" | "teamUnarchived" }, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, historyDisclosed?: boolean, id: string,
        isStreaming?: () => boolean, localTimestamp?: Date, locale?: string,
        meeting?: MeetingInfo, membersAdded?: Account<any>[], membersRemoved?:
        Account<any>[], notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, topicName?:
        string, type: "conversationUpdate" } | { channel?: ChannelInfo,
        channelData?: ChannelData, channelId?: ChannelID, code?:
        EndOfConversationCode, conversation?: ConversationAccount, entities?:
        Entity[], from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, text?: string, timestamp?: Date, type: "endOfConversation" } |
        { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
        string, notification?: NotificationInfo, recipient?: Account<any>,
        relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
        string, team?: TeamInfo, timestamp?: Date, type: "command", value?:
        CommandValue<any> } | { channel?: ChannelInfo, channelData?:
        ChannelData, channelId?: ChannelID, conversation?: ConversationAccount,
        entities?: Entity[], from?: Account<any>, id: string, isStreaming?: ()
        => boolean, localTimestamp?: Date, locale?: string, meeting?:
        MeetingInfo, name?: string, notification?: NotificationInfo, recipient?:
        Account<any>, relatesTo?: ConversationReference, replyToId?: string,
        serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
        "commandResult", value?: CommandResultValue<any> } | { action?: "add",
        channel?: ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
        conversation?: ConversationAccount, entities?: Entity[], from?:
        Account<any>, id: string, isStreaming?: () => boolean, localTimestamp?:
        Date, locale?: string, meeting?: MeetingInfo, notification?:
        NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "installationUpdate" } | { action?:
        "remove", channel?: ChannelInfo, channelData?: ChannelData, channelId?:
        ChannelID, conversation?: ConversationAccount, entities?: Entity[],
        from?: Account<any>, id: string, isStreaming?: () => boolean,
        localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
        notification?: NotificationInfo, recipient?: Account<any>, relatesTo?:
        ConversationReference, replyToId?: string, serviceUrl?: string, team?:
        TeamInfo, timestamp?: Date, type: "installationUpdate" }>
      parameters:
        - id: activity
          type: <xref uid="@microsoft/teams.api.ActivityParams" />
          description: ''
        - id: ref
          type: <xref uid="@microsoft/teams.api.ConversationReference" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;{ attachmentLayout?: AttachmentLayout, attachments?:
          Attachment[], channel?: ChannelInfo, channelData?: ChannelData,
          channelId?: ChannelID, conversation?: ConversationAccount,
          deliveryMode?: DeliveryMode, entities?: Entity[], expiration?: Date,
          from?: Account&lt;any&gt;, getAccountMention?: (accountId: string)
          =&gt; undefined | MentionEntity, id: string, importance?: Importance,
          inputHint?: InputHint, isRecipientMentioned?: () =&gt; boolean,
          isStreaming?: () =&gt; boolean, localTimestamp?: Date, locale?:
          string, meeting?: MeetingInfo, notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, speak?: string,
          stripMentionsText?: (options?: StripMentionsTextOptions) =&gt;
          IMessageActivity, suggestedActions?: SuggestedActions, summary?:
          string, team?: TeamInfo, text?: string, textFormat?: TextFormat,
          timestamp?: Date, type: "message", value?: any } | { channel?:
          ChannelInfo, channelData?: ChannelData & { eventType:
          "undeleteMessage" | "editMessage" }, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], expiration?:
          Date, from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt;
          boolean, localTimestamp?: Date, locale?: string, meeting?:
          MeetingInfo, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, speak?: string, summary?: string, team?:
          TeamInfo, text?: string, timestamp?: Date, type: "messageUpdate",
          value?: any } | { channel?: ChannelInfo, channelData?: ChannelData & {
          eventType: "softDeleteMessage" }, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "messageDelete" } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, reactionsAdded?: MessageReaction[],
          reactionsRemoved?: MessageReaction[], recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "messageReaction" } |
          { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "<xref uid="application/vnd.microsoft.readReceipt" />", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "event" } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "<xref
          uid="application/vnd.microsoft.meetingStart" />", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "event", value?: { id: string,
          joinUrl: string, meetingType: string, startTime: Date, title: string }
          } | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "<xref uid="application/vnd.microsoft.meetingEnd" />", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "event", value?: { endTime: Date,
          id: string, joinUrl: string, meetingType: string, title: string } } |
          { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "<xref uid="application/vnd.microsoft.meetingParticipantJoin" />",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "event", value?: {
          members: { meeting: { inMeeting: boolean, role: string }, user:
          Account&lt;any&gt; }[] } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "<xref
          uid="application/vnd.microsoft.meetingParticipantLeave" />",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "event", value?: {
          members: { meeting: { inMeeting: boolean, role: string }, user:
          Account&lt;any&gt; }[] } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "fileConsent/invoke",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          FileConsentCardResponse } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?:
          "actionableMessage/executeAction", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: O365ConnectorCardActionQuery } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/anonymousQueryLink", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "invoke", value?: AppBasedLinkQuery
          } | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/fetchTask", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionAction } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/onCardButtonClicked", notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "invoke", value?: any } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/queryLink", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: AppBasedLinkQuery } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/querySettingUrl", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionQuery } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/query", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: MessagingExtensionQuery } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/selectItem", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: any } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/setting", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionQuery } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "composeExtension/submitAction", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: MessagingExtensionAction } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "config/fetch", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: any } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "config/submit",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?: any
          } | { channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "tab/fetch", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: TabRequest } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "tab/submit",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          TabRequest } | { channel?: ChannelInfo, channelData?: ChannelData,
          channelId?: ChannelID, conversation?: ConversationAccount, entities?:
          Entity[], from?: Account&lt;any&gt;, id: string, isStreaming?: ()
          =&gt; boolean, localTimestamp?: Date, locale?: string, meeting?:
          MeetingInfo, name?: "task/fetch", notification?: NotificationInfo,
          recipient?: Account&lt;any&gt;, relatesTo?: ConversationReference,
          replyToId?: string, serviceUrl?: string, team?: TeamInfo, timestamp?:
          Date, type: "invoke", value?: TaskModuleRequest } | { channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          "task/submit", notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "invoke", value?: TaskModuleRequest } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "message/submitAction",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?: {
          actionName: "feedback", actionValue: { feedback: string, reaction:
          "like" | "dislike" } } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "handoff/action",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?: {
          continuation: string } } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "signin/tokenExchange",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          SignInExchangeToken } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "signin/verifyState",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          SigninStateVerifyQuery } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: "adaptiveCard/action",
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "invoke", value?:
          AdaptiveCardInvokeValue } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, label?: string,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo, name?:
          string, notification?: NotificationInfo, recipient?:
          Account&lt;any&gt;, relatesTo?: ConversationReference, replyToId?:
          string, serviceUrl?: string, team?: TeamInfo, timestamp?: Date, type:
          "trace", value?: any, valueType?: string } | { channel?: ChannelInfo,
          channelData?: ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, text?: string, timestamp?: Date, type: "typing" } | {
          channel?: ChannelInfo, channelData?: ChannelData, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "handoff" } | {
          channel?: ChannelInfo, channelData?: ChannelData & { eventType:
          "channelCreated" | "channelDeleted" | "channelRenamed" |
          "channelRestored" | "teamArchived" | "teamDeleted" | "teamHardDeleted"
          | "teamRenamed" | "teamRestored" | "teamUnarchived" }, channelId?:
          ChannelID, conversation?: ConversationAccount, entities?: Entity[],
          from?: Account&lt;any&gt;, historyDisclosed?: boolean, id: string,
          isStreaming?: () =&gt; boolean, localTimestamp?: Date, locale?:
          string, meeting?: MeetingInfo, membersAdded?: Account&lt;any&gt;[],
          membersRemoved?: Account&lt;any&gt;[], notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, topicName?: string, type:
          "conversationUpdate" } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, code?: EndOfConversationCode,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, text?: string, timestamp?: Date, type:
          "endOfConversation" } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: string, notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "command", value?:
          CommandValue&lt;any&gt; } | { channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, name?: string, notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "commandResult", value?:
          CommandResultValue&lt;any&gt; } | { action?: "add", channel?:
          ChannelInfo, channelData?: ChannelData, channelId?: ChannelID,
          conversation?: ConversationAccount, entities?: Entity[], from?:
          Account&lt;any&gt;, id: string, isStreaming?: () =&gt; boolean,
          localTimestamp?: Date, locale?: string, meeting?: MeetingInfo,
          notification?: NotificationInfo, recipient?: Account&lt;any&gt;,
          relatesTo?: ConversationReference, replyToId?: string, serviceUrl?:
          string, team?: TeamInfo, timestamp?: Date, type: "installationUpdate"
          } | { action?: "remove", channel?: ChannelInfo, channelData?:
          ChannelData, channelId?: ChannelID, conversation?:
          ConversationAccount, entities?: Entity[], from?: Account&lt;any&gt;,
          id: string, isStreaming?: () =&gt; boolean, localTimestamp?: Date,
          locale?: string, meeting?: MeetingInfo, notification?:
          NotificationInfo, recipient?: Account&lt;any&gt;, relatesTo?:
          ConversationReference, replyToId?: string, serviceUrl?: string, team?:
          TeamInfo, timestamp?: Date, type: "installationUpdate" }&gt;
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.send
  - name: static(string, string)
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.static'
    package: '@microsoft/teams.botbuilder'
    summary: serve static files
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function static(path: string, dist: string): BotBuilderPlugin'
      parameters:
        - id: path
          type: string
          description: the url path to serve
        - id: dist
          type: string
          description: the dist file path to serve
      return:
        description: ''
        type: <xref uid="@microsoft/teams.botbuilder.BotBuilderPlugin" />
    inheritanceDescription: <b>Inherited From</b> HttpPlugin.static
methods:
  - name: onInit()
    uid: '@microsoft/teams.botbuilder.BotBuilderPlugin.onInit'
    package: '@microsoft/teams.botbuilder'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: function onInit()
extends: <xref uid="@microsoft/teams.apps.HttpPlugin" />
