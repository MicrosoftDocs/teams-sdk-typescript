### YamlMime:TSType
name: App
uid: '@microsoft/teams.client.App'
package: '@microsoft/teams.client'
summary: ''
fullName: App
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: App(string, AppOptions)
    uid: '@microsoft/teams.client.App.constructor'
    package: '@microsoft/teams.client'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new App(clientId: string, options?: AppOptions)'
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: options
          type: <xref uid="@microsoft/teams.client.AppOptions" />
          description: ''
properties:
  - name: clientId
    uid: '@microsoft/teams.client.App.clientId'
    package: '@microsoft/teams.client'
    summary: ''
    fullName: clientId
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'clientId: string'
      return:
        description: ''
        type: string
  - name: graph
    uid: '@microsoft/teams.client.App.graph'
    package: '@microsoft/teams.client'
    summary: ''
    fullName: graph
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'graph: Client'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.graph.Client" />
  - name: http
    uid: '@microsoft/teams.client.App.http'
    package: '@microsoft/teams.client'
    summary: ''
    fullName: http
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'http: Client'
      return:
        description: ''
        type: Client
  - name: log
    uid: '@microsoft/teams.client.App.log'
    package: '@microsoft/teams.client'
    summary: the apps logger
    fullName: log
    remarks: ''
    isDeprecated: false
    syntax:
      content: ILogger log
      return:
        description: ''
        type: ILogger
  - name: msalInstance
    uid: '@microsoft/teams.client.App.msalInstance'
    package: '@microsoft/teams.client'
    summary: the msal instance used in this app. undefined until the app is started.
    fullName: msalInstance
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | IPublicClientApplication msalInstance
      return:
        description: ''
        type: >-
          undefined | <xref uid="@azure/msal-browser.IPublicClientApplication"
          />
  - name: options
    uid: '@microsoft/teams.client.App.options'
    package: '@microsoft/teams.client'
    summary: ''
    fullName: options
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'options: AppOptions'
      return:
        description: ''
        type: <xref uid="@microsoft/teams.client.AppOptions" />
  - name: startedAt
    uid: '@microsoft/teams.client.App.startedAt'
    package: '@microsoft/teams.client'
    summary: the date/time when the app was successfully started.
    fullName: startedAt
    remarks: ''
    isDeprecated: false
    syntax:
      content: undefined | Date startedAt
      return:
        description: ''
        type: undefined | Date
methods:
  - name: ensureConsentForScopes(string[])
    uid: '@microsoft/teams.client.App.ensureConsentForScopes'
    package: '@microsoft/teams.client'
    summary: >-
      Tests whether the user has consented to the specified scopes, and prompts
      them if not. This is useful for ensuring

      that the user has consented to the required scopes before calling a graph
      API or other resource.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function ensureConsentForScopes(scopes: string[]): Promise<boolean>'
      parameters:
        - id: scopes
          type: string[]
          description: >-
            The scopes to prewarm consent for. The scopes should be for a single
            resource, and they

            should not mix the .default scope with named scopes.
      return:
        description: >-
          A value indicating whether consent has been acquired for the specified
          scopes.
        type: Promise&lt;boolean&gt;
  - name: exec<T>(string, unknown, ExecOptions)
    uid: '@microsoft/teams.client.App.exec'
    package: '@microsoft/teams.client'
    summary: Execute a server-side function
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function exec<T>(name: string, data?: unknown, options?: ExecOptions):
        Promise<T>
      parameters:
        - id: name
          type: string
          description: The unique function name
        - id: data
          type: unknown
          description: The data to send
        - id: options
          type: <xref uid="@microsoft/teams.client.ExecOptions" />
          description: Options
      return:
        description: The function response
        type: Promise&lt;T&gt;
  - name: hasConsentForScopes(string[])
    uid: '@microsoft/teams.client.App.hasConsentForScopes'
    package: '@microsoft/teams.client'
    summary: >-
      Tests whether the user has consented to the specified scopes without
      prompting the user for consent.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function hasConsentForScopes(scopes: string[]): Promise<boolean>'
      parameters:
        - id: scopes
          type: string[]
          description: >-
            The scopes to check consent for.The scopes should be for a single
            resource, and they

            should not mix the .default scope with named scopes.
      return:
        description: >-
          A promise that resolves to a boolean indicating whether the user has
          consented to the scopes.
        type: Promise&lt;boolean&gt;
  - name: start()
    uid: '@microsoft/teams.client.App.start'
    package: '@microsoft/teams.client'
    summary: >-
      Starts the library and initializes the dependent teams-js and MSAL
      libraries.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function start(): Promise<void>'
      return:
        description: |-
          A promise that will be fulfilled when the app has started, or
                   rejected if the initialization fails or times out.
        type: Promise&lt;void&gt;
